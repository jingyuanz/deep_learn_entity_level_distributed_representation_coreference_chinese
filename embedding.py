# -*- coding: utf-8 -*-
import os
import pickle
from six import PY2
from os import path
import tarfile
from six import string_types

class Embedding:
    def __init__(self, original_tar_path='./zh.sgns.model.tar.bz2', pkl_path='./embedding/embeddings.pkl'):
        if not os.path.exists('./embedding/embeddings.pkl'):
            self.embeddings = self.save_from_embedding_tar(original_tar_path, pkl_path)
        else:
            self.embeddings = self.load_from_pickle(pkl_path)

    def save_from_embedding_tar(self, original_tar_path, pkl_path):
        """Load an embedding dump generated by `save`"""

        content = self._open(original_tar_path).read()
        if PY2:
            state = pickle.loads(content)
        else:
            state = pickle.loads(content, encoding='latin1')
        voc, vec = state
        embedding_dict = {}
        for i in range(len(voc)):
            key = voc[i]
            embedding_dict[key] = vec[i]
        output = open(pkl_path, 'wb')
        pickle.dump(embedding_dict, output)
        output.close()
        return embedding_dict

    def load_from_pickle(self, pkl_path):
        pkl_file = open(pkl_path, 'rb')
        embeddings = pickle.load(pkl_file)
        pkl_file.close()
        return embeddings

    def get(self, k, t=None, default=None):
        try:
            return self.embeddings[k]
        except KeyError as e:
            if t == 'ns':
                return self.embeddings['中国'.decode('utf-8')]
            elif t == 'nr':
                return self.embeddings['江泽民'.decode('utf-8')]
            elif t == 'nz':
                return self.embeddings['傣族'.decode('utf-8')]
            elif t == 'n':
                return self.embeddings['东西'.decode('utf-8')]
            elif t == 'nt':
                return self.embeddings['中共中央'.decode('utf-8')]
            elif t == 'r':
                return self.embeddings['这'.decode('utf-8')]
            elif t == 't':
                return self.embeddings['今天'.decode('utf-8')]
            return default

    def _open(self, file_, mode='r'):
        """Open file object given filenames, open files or even archives."""
        if isinstance(file_, string_types):
            _, ext = path.splitext(file_)
            if ext in {'.bz2', '.gz'}:
                s = tarfile.open(file_)
                return s.extractfile(s.next())
            else:
                return open(file_, mode)
        return file_

if __name__ == '__main__':
    e = Embedding()
    print e.get('东西'.decode('utf-8'))
